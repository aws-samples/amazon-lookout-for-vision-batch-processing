AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless Lookout for Vision Batch Processing (uksb-1rn9tlcbm)
Parameters:
  lookoutforvisionProjectName:
    Type: String
    Description: Amazon Lookout for Vision Project
  lookoutforvisionProjectModelVersion:
    Type: String
    AllowedPattern: ^[1-9][0-9]*|latest
    Description: Amazon Lookout for Vision Project Model version
  minimumInferenceUnitsToUse:
    Type: Number
    Description: Minimum number of inference units to use (Max 5)
    Default: 1
  clientToken:
    Type: String
    Description: Optional idempotency token string that ensures a call to StartModel completes only once
    Default: RunOnce

Metadata:
  Version: "v0.1"

Resources:
  SourceS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .png
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .PNG
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .JPG
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpeg
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .JPEG

  SourceS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceS3Bucket
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: '*'
            Effect: Deny
            Resource: !Sub arn:aws:s3:::${SourceS3Bucket}/*
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 60

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "TestSID"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "s3.amazonaws.com"
            Action:
              - "sqs:DeleteMessage"
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage"
            Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${SQSQueue.QueueName}"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
      Queues:
        - !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SQSQueue.QueueName}"

  LFVBatchStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: Check SQS Queue
        States:
          Check SQS Queue:
            Type: Task
            Resource: !GetAtt SQSPollerFunction.Arn
            ResultPath: $.messageinqueue
            Next: Are there images to process?
          Are there images to process?:
            Type: Choice
            Choices:
              - Variable: $.messageinqueue
                StringEquals: incoming
                Next: Start Model
            Default: Finish
          Start Model:
            Type: Task
            Resource: !GetAtt StartModelFunction.Arn
            ResultPath: "$.runningstatus"
            Next: Start States
          Start States:
            Type: Choice
            Choices:
              - Variable: "$.runningstatus"
                StringEquals: HOSTED
                Next: Enable SQS Trigger
            Default: Wait for the model to start
          Wait for the model to start:
            Type: Wait
            Seconds: 1200
            Next: Start Model
          Keep Model running for 1 hr:
            Type: Wait
            Seconds: 3540
            Next: Check Queue Again
          Check Queue Again:
            Type: Task
            Resource: !GetAtt SQSPollerFunction.Arn
            ResultPath: $.moremessagesinqueue
            Next: Are there more images?
          Are there more images?:
            Type: Choice
            Choices:
              - Variable: $.moremessagesinqueue
                StringEquals: stop
                Next: Disable SQS Trigger
            Default: Keep Model running for 1 hr
          Enable SQS Trigger:
            Type: Task
            ResultPath: $.alreadyrunning
            Parameters:
              - Action: enable
            Resource: !GetAtt ToggleTriggerFunction.Arn
            Next: Is another machine already running?
          Is another machine already running?:
            Type: Choice
            Choices:
                - Variable: $.alreadyrunning
                  StringEquals: Already_Running
                  Next: Finish
            Default: Keep Model running for 1 hr
          Disable SQS Trigger:
            Type: Task
            Parameters:
              - Action: disable
            Resource: !GetAtt ToggleTriggerFunction.Arn
            Next: Stop Model
          Stop Model:
            Type: Task
            Resource: !GetAtt StopModelFunction.Arn
            Next: Finish
          Finish:
            Type: Succeed
      Events:
        HourlyPollingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the state machine every 1 hour
            Enabled: True # This schedule can be disabled based on the use case to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref SQSPollerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StartModelFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StopModelFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ToggleTriggerFunction

  SQSPollerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Description: "Lambda function to Poll SQS queue for incoming messages from S3"
      CodeUri: functions/sqs_poller/
      Handler: app.lambda_handler
      Environment:
        Variables:
          SQS_Queue_URL: !Ref SQSQueue
      Runtime: python3.8
      MemorySize: 128
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - LambdaInvokePolicy:
            FunctionName: !Ref StartModelFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StopModelFunction

  StartModelFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Description: "Lambda function to Start the Lookout for Vision model"
      CodeUri: functions/start_model/
      Handler: app.lambda_handler
      Environment:
        Variables:
          lookoutforvision_project_name: !Ref lookoutforvisionProjectName
          lookoutforvision_project_model_version: !Ref lookoutforvisionProjectModelVersion
          minimumInferenceUnitsToUse : !Ref minimumInferenceUnitsToUse
          clientToken : !Ref clientToken
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Policies:
        - Statement:
            - Action:
                - "lookoutvision:DescribeModel"
                - "lookoutvision:StartModel"
              Effect: "Allow"
              Resource: 
                - !Sub "arn:aws:lookoutvision:${AWS::Region}:${AWS::AccountId}:model/${lookoutforvisionProjectName}/${lookoutforvisionProjectModelVersion}"
                - !Sub "arn:aws:lookoutvision:${AWS::Region}:${AWS::AccountId}:project/${lookoutforvisionProjectName}"
        - LambdaInvokePolicy:
            FunctionName: !Ref ToggleTriggerFunction

  StopModelFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Description: "Lambda function to Stop the Lookout for Vision model"
      CodeUri: functions/stop_model/
      Handler: app.lambda_handler
      Environment:
        Variables:
          lookoutforvision_project_name: !Ref lookoutforvisionProjectName
          lookoutforvision_project_model_version: !Ref lookoutforvisionProjectModelVersion
          clientToken : !Ref clientToken
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Policies:
        - Statement:
            - Action:
                - "lookoutvision:DescribeModel"
                - "lookoutvision:StopModel"
              Effect: "Allow"
              Resource:  
                - !Sub "arn:aws:lookoutvision:${AWS::Region}:${AWS::AccountId}:model/${lookoutforvisionProjectName}/${lookoutforvisionProjectModelVersion}"
                - !Sub "arn:aws:lookoutvision:${AWS::Region}:${AWS::AccountId}:project/${lookoutforvisionProjectName}"
        - LambdaInvokePolicy:
            FunctionName: !Ref ToggleTriggerFunction

  ToggleTriggerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Description: "Lambda function to toggle the SQS trigger for analysis"
      CodeUri: functions/toggle_trigger/
      Handler: app.lambda_handler
      Environment:
        Variables:
          analyze_lambda_uuid: !Ref AnalyseImageFunctionSQSEvent
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Policies:
        - Statement:
            - Action:
                - lambda:GetEventSourceMapping
                - lambda:UpdateEventSourceMapping
              Effect: Allow
              Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:${AnalyseImageFunctionSQSEvent}

  FinalS3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  FinalS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FinalS3Bucket
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: '*'
            Effect: Deny
            Resource: !Sub arn:aws:s3:::${FinalS3Bucket}/*
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  AnalyseImageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Description: "Lambda function to analyze Images using the Lookout for Vision Model"
      CodeUri: functions/analyse_image/
      Handler: app.lambda_handler
      Environment:
        Variables:
          lookoutforvision_project_name: !Ref lookoutforvisionProjectName
          lookoutforvision_project_model_version: !Ref lookoutforvisionProjectModelVersion
          Final_S3_Bucket_Name: !Ref FinalS3Bucket
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 1
            Enabled: false
      MemorySize: 128
      Timeout: 60
      Runtime: python3.8
      Policies:
        - Statement:
            - Action:
                - "lookoutvision:DetectAnomalies"
                - "s3:GetObject"
              Effect: "Allow"
              Resource:  
                - !Sub "arn:aws:lookoutvision:${AWS::Region}:${AWS::AccountId}:model/${lookoutforvisionProjectName}/${lookoutforvisionProjectModelVersion}"
                - !Sub "arn:aws:lookoutvision:${AWS::Region}:${AWS::AccountId}:project/${lookoutforvisionProjectName}"
        - S3CrudPolicy:
            BucketName: !Ref FinalS3Bucket
        - S3CrudPolicy:
            BucketName: !Ref SourceS3Bucket
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName

Outputs:
  # CustomCVStateMachineHourlySchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  SourceS3BucketName:
    Description: "Name of the S3 bucket to hold the incoming images"
    Value: !Ref SourceS3Bucket
  FinalS3BucketName:
    Description: "Name of the final S3 bucket to hold the image and the inference json"
    Value: !Ref FinalS3Bucket
  LFVBatchStateMachineARN:
    Description: "ARN of the Step Function"
    Value: !Ref LFVBatchStateMachine
  CustomCVStateMachineHourlyPollingScheduleARN:
    Description: "ARN of the AWS EventBridge Rule"
    Value: !Ref LFVBatchStateMachineHourlyPollingSchedule
  MatteoTest:
    Value: !Ref AnalyseImageFunctionSQSEvent
